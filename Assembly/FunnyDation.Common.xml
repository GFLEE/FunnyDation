<?xml version="1.0"?>
<doc>
    <assembly>
        <name>FunnyDation.Common</name>
    </assembly>
    <members>
        <member name="T:FunnyDation.Common.Reflection.Converter">
            <summary>
            Converter class for basic types.
            </summary>
        </member>
        <member name="M:FunnyDation.Common.Reflection.Converter.ConvertObj``1(System.Object)">
            <summary>
            Convert to correct type.
            </summary>
            <typeparam name="T">Type of object to convert.</typeparam>
            <param name="input">Object to convert.</param>
            <returns>Converted object.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.Converter.ConvertTo``1(System.Object)">
            <summary>
            Convert to correct type.
            </summary>
            <typeparam name="T">Type of object whose type is to be converted.</typeparam>
            <param name="input">Object whose type is to be converted.</param>
            <returns>Type of converted object.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.Converter.ConvertTo(System.Type,System.Object)">
            <summary>
            Convert to correct type.
            </summary>
            <param name="type">Type of object whose type is to be converted.</param>
            <param name="input">Object whose type is to be converted.</param>
            <returns>Type of converted object.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.Converter.CanConvertTo``1(System.String)">
            <summary>
            Checks whether or not the object can be converted to a type.
            </summary>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if the object can be converted to a type.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.Converter.CanConvertTo(System.Type,System.String)">
            <summary>
            Checks whether or not the object can be converted to a type.
            </summary>
            <param name="type">The property represnting the type to convert 
            val to</param>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if the object can be converted to a type.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.Converter.CanConvertToCorrectType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Check to see if can convert to appropriate type
            </summary>
            <param name="propInfo">Information of property to check.</param>
            <param name="val">Object to convert to.</param>
            <returns>True if the object can be converted to the property type.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.Converter.CanConvertToCorrectType(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Checks whether or not the string can be converted to a propert type.
            </summary>
            <param name="propInfo">The property represnting the type to convert 
            val to</param>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if the string can be converted.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.Converter.ConvertToSameType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Convert the val from string type to the same time as the property.
            </summary>
            <param name="propInfo">Property representing the type to convert to</param>
            <param name="val">val to convert</param>
            <returns>converted value with the same time as the property</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.Converter.IsSameType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Determine if the type of the property and the val are the same type.
            </summary>
            <param name="propInfo">Property info to check.</param>
            <param name="val">Value to check against property info.</param>
            <returns>True if the property and the value are of the same type.</returns>
        </member>
        <member name="T:FunnyDation.Common.Reflection.AssemblyUtils">
            <summary>
            Assembly related reflection utils.
            </summary>
        </member>
        <member name="M:FunnyDation.Common.Reflection.AssemblyUtils.GetInternalFileContent(System.String,System.String)">
            <summary>
            Get the internal template content from the commonlibrary assembly.
            </summary>
            <param name="assemblyFolderPath">"CommonLibrary.Notifications.Templates."</param>
            <param name="fileName">"welcome.html"</param>
            <returns>String with internal template content.</returns>
        </member>
        <member name="T:FunnyDation.Common.Reflection.AttributeHelper">
            <summary>
            Reflection utility class for attributes.
            </summary>
        </member>
        <member name="M:FunnyDation.Common.Reflection.AttributeHelper.GetAssemblyInfoDescription(System.Type,System.String)">
            <summary>
            Get the description attribute from the assembly associated with <paramref name="type"/>
            </summary>
            <param name="type">The type who's assembly's description should be obtained.</param>
            <param name="defaultVal">Default value to use if description is not available.</param>
            <returns>String with assembly information description.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.AttributeHelper.GetClassAttributes``1(System.Object)">
            <summary>
            Gets the attributes of the specified type applied to the class.
            </summary>
            <typeparam name="T">Type of attributes to look for.</typeparam>
            <param name="obj">The obj.</param>
            <returns>List with class custom attributes.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.AttributeHelper.GetClassAttributesFromAssembly``1(System.String,System.Action{System.Collections.Generic.KeyValuePair{System.Type,``0}})">
            <summary>
            Loads widgets from the assembly name supplied.
            </summary>
            <typeparam name="T">Type of attributes to look for.</typeparam>
            <param name="assemblyName">The name of the assembly to load widgets from.</param>
            <param name="action">A callback for the datatype and widgetattribute.</param>
            <returns>List with key/value pair with attributes.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.AttributeHelper.GetPropsWithAttributes``1(System.Object)">
            <summary>
            Get a list of property info's that have the supplied attribute applied to it.
            </summary>
            <typeparam name="T">Type of attributes to look for.</typeparam>
            <param name="obj">Object to look into.</param>
            <returns>Pair of key/value items with properties.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.AttributeHelper.GetPropsOnlyWithAttributes``1(System.Object)">
            <summary>
            Get a list of property info's that have the supplied attribute applied to it.
            </summary>
            <typeparam name="T">Type of attributes to look for.</typeparam>
            <param name="obj">Object to look into.</param>
            <returns>List of properties found.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.AttributeHelper.GetPropsWithAttributesList``1(System.Object)">
            <summary>
            Get a list of property info's that have the supplied attribute applied to it.
            </summary>
            <typeparam name="T">Type of attribute to look for.</typeparam>
            <param name="obj">Object to look into.</param>
            <returns>List with key/value pairs with property info.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.AttributeHelper.GetPropertiesWithAttributesOnTypes``1(System.Collections.Generic.IList{System.Type},System.Action{System.Type,System.Collections.Generic.KeyValuePair{System.Reflection.PropertyInfo,``0}})">
            <summary>
            Gets all the properties associated with the supplied types that have the attribute applied to them.
            </summary>
            <typeparam name="TPropAttrib">The type of the attribute that properties should have</typeparam>
            <param name="types">The list of types to search properties for.</param>
            <param name="action">Callback</param>
            <returns>List with key/value pairs with property info.</returns>
        </member>
        <member name="T:FunnyDation.Common.Reflection.ReflectionTypeChecker">
            <summary>
            Various reflection based utility methods.
            </summary>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionTypeChecker.CanConvertTo``1(System.String)">
            <summary>
            Checks whether or not the supplied text can be converted
            to a specific type.
            </summary>
            <typeparam name="T">Type to convert to.</typeparam>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if </returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionTypeChecker.CanConvertTo(System.Type,System.String)">
            <summary>
            Checks whether or not the supplied text can be converted
            to a specific type.
            </summary>
            <param name="type">The type to convert val to</param>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if the conversion can be performed.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionTypeChecker.CanConvertToCorrectType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Check to see if can convert to appropriate type.
            </summary>
            <param name="propInfo">Property to check.</param>
            <param name="val">Instance of object with property.</param>
            <returns>True if the conversion can be performed.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionTypeChecker.CanConvertToCorrectType(System.Reflection.PropertyInfo,System.String)">
            <summary>
            Checks whether or not the supplied string can be converted
            to the type designated by the supplied property.
            </summary>
            <param name="propInfo">The property representing the type to convert 
            val to</param>
            <param name="val">The value to test for conversion to the type
            associated with the property</param>
            <returns>True if the conversion can be performed.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionTypeChecker.ConvertToSameType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Convert the val from string type to the same time as the property.
            </summary>
            <param name="propInfo">Property representing the type to convert to</param>
            <param name="val">val to convert</param>
            <returns>converted value with the same time as the property</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionTypeChecker.IsSameType(System.Reflection.PropertyInfo,System.Object)">
            <summary>
            Determine if the type of the property and the val are the same
            </summary>
            <param name="propInfo">Property whose type is to be compared.</param>
            <param name="val">Object whose type is to be compared.</param>
            <returns>True if the property and the object are of the same type.</returns>
        </member>
        <member name="T:FunnyDation.Common.Reflection.ReflectionUtils">
            <summary>
            Various reflection based utility methods.
            </summary>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.SetProperties``1(``0,System.Collections.Generic.IList{System.Collections.Generic.KeyValuePair{System.String,System.String}})">
            <summary>
            Set object properties on T using the properties collection supplied.
            The properties collection is the collection of "property" to value.
            </summary>
            <typeparam name="T">A class type.</typeparam>
            <param name="obj">Object whose properties will be set.</param>
            <param name="properties">List of key/value pairs with property names and values.</param>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.SetProperty``1(System.Object,System.String,System.Object)">
            <summary>
            Set the object properties using the prop name and value.
            </summary>
            <typeparam name="T">A class type.</typeparam>
            <param name="obj">Object whose property will be set.</param>
            <param name="propName">Property name to set.</param>
            <param name="propVal">Property value to set.</param>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.SetProperty(System.Object,System.String,System.Object)">
            <summary>
            Set the object properties using the prop name and value.
            </summary>
            <param name="obj">Object whose property will be set.</param>
            <param name="propName">Property name to set.</param>
            <param name="propVal">Property value to set.</param>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.SetProperty(System.Object,System.Reflection.PropertyInfo,System.Object,System.Boolean)">
            <summary>
            Set the object properties using the prop name and value.
            </summary>
            <param name="obj">Object whose property will be set.</param>
            <param name="prop">Property information.</param>
            <param name="propVal">Property value to set.</param>
            <param name="catchException">Try to catch any exception and
            not throw it to the caller.</param>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.SetProperty(System.Object,System.Reflection.PropertyInfo,System.String)">
            <summary>
            Set the property value using the string value.
            </summary>
            <param name="obj">Object whose property will be set.</param>
            <param name="prop">Property information.</param>
            <param name="propVal">Property value to set.</param>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.GetPropertyValue(System.Object,System.String)">
            <summary>
            Get the property value.
            </summary>
            <param name="obj">Object whose property will be retrieved.</param>
            <param name="propName">Name of property to retrieve.</param>
            <returns>Property value.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.GetPropertyValues(System.Object,System.Collections.Generic.IList{System.String})">
            <summary>
            Get all the property values.
            </summary>
            <param name="obj">Object whose properties will be retrieved.</param>
            <param name="properties">List of properties to retrieve.</param>
            <returns>List with property values.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.GetProperties(System.Object,System.String)">
            <summary>
            Get all the properties.
            </summary>
            <param name="obj">Object whose properties will be retrieved.</param>
            <param name="propsDelimited">Delimited list with properties to retrieve.</param>
            <returns>List of property values.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.GetProperties(System.Type,System.String[])">
            <summary>
            Get property information for a type.
            </summary>
            <param name="type">Type whose property names to retrieve.</param>
            <param name="props">Array with property names to look for.</param>
            <returns>List with property information of found properties.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.GetProperties(System.Type,System.String[],System.Reflection.BindingFlags)">
            <summary>
            Get all the properties.
            </summary>
            <param name="type">Type whose property names to retrieve.</param>
            <param name="props">Array with property names to look for.</param>
            <param name="flags">Flags to use when searching for properties.</param>
            <returns>List with property information of found properties.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.GetPropertyValueSafely(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Gets the property value safely, without throwing an exception.
            If an exception is caught, null is returned.
            </summary>
            <param name="obj">Object to look into.</param>
            <param name="propInfo">Information of property to retrieve.</param>
            <returns>Retrieved property value.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.GetAllProperties(System.Object,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Gets all the properties of an object.
            </summary>
            <param name="obj">Object to look into.</param>
            <param name="criteria">Matching criteria.</param>
            <returns>List with information of matched properties.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.GetProperties(System.Type,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Get the properties of a type.
            </summary>
            <param name="type">Type to look into.</param>
            <param name="criteria">Matching criteria.</param>
            <returns>List of information of matched properties.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.GetWritableProperties(System.Object,System.Collections.Specialized.StringDictionary)">
            <summary>
            Gets all the writable properties of an object.
            </summary>
            <param name="obj">Object to look into.</param>
            <param name="propsToExclude">Dictionary with properties to exclude.</param>
            <returns>List with information of matched properties.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.GetProperties(System.Collections.Specialized.StringDictionary,System.Type)">
            <summary>
            Gets all the properties of a type.
            </summary>
            <param name="propsToExclude">Dictionary with properties to exclude.</param>
            <param name="typ">Type to look into.</param>
            <returns>List with information of matched properties.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.GetPropertiesAsMap(System.Object,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Gets all the properties of the object as dictionary of property names to propertyInfo.
            </summary>
            <param name="obj">Object to look into.</param>
            <param name="criteria">Matching criteria.</param>
            <returns>Dictionary with property name and information of matched properties.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.GetPropertiesAsMap(System.Type,System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Get all the properties.
            </summary>
            <param name="type">Type to look into.</param>
            <param name="flags">Flags to use when looking for properties.</param>
            <param name="isCaseSensitive">True to use the property name in the
            dictionary with its lower-cased value.</param>
            <returns>Dictionary with property name and information of found properties.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.GetPropertiesAsMap``1(System.Reflection.BindingFlags,System.Boolean)">
            <summary>
            Get all the properties.
            </summary>
            <typeparam name="T">Type to look into.</typeparam>
            <param name="flags">Flags to use when looking for properties.</param>
            <param name="isCaseSensitive">True to use the property name in the
            dictionary with its lower-cased value.</param>
            <returns>Dictionary with property name and information of found properties.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.GetProperty(System.Type,System.String)">
            <summary>
            Get the propertyInfo of the specified property name.
            </summary>
            <param name="type">Type to look into.</param>
            <param name="propertyName">Name of property.</param>
            <returns>Information of property.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.GetWritableProperties(System.Type,System.Predicate{System.Reflection.PropertyInfo})">
            <summary>
            Gets a list of all the writable properties of the class associated with the object.
            </summary>
            <param name="type">Type to look into.</param>
            <param name="criteria">Matching criteria.</param>
            <remarks>This method does not take into account, security, generics, etc.
            It only checks whether or not the property can be written to.</remarks>
            <returns>List with information of matching properties.</returns>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.InvokeMethod(System.Object,System.String,System.Object[])">
            <summary>
            Invokes the method on the object provided.
            </summary>
            <param name="obj">The object containing the method to invoke</param>
            <param name="methodName">arguments to the method.</param>
            <param name="parameters">Parameters to pass when invoking the method.</param>
        </member>
        <member name="M:FunnyDation.Common.Reflection.ReflectionUtils.CopyPropertyValue(System.Object,System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Copies the property value from the source to destination.
            </summary>
            <param name="source">Source object.</param>
            <param name="destination">Destination object.</param>
            <param name="prop">Information of property whose value
            is to be copied from the source to the target object.</param>
        </member>
        <member name="M:FunnyDation.Common.Base.EnumCollection.GetEnumCollection``1(``0)">
            <summary>
            GetEnumCollection
            </summary>
            <typeparam name="T"></typeparam>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:FunnyDation.Common.FDConst">
            <summary>
            
            </summary>
        </member>
        <member name="T:FunnyDation.Common.Ioc.FDIoc">
            <summary>
            Global Service Provider
            </summary>
        </member>
        <member name="T:FunnyDation.Common.Helper.EnumerableHelper">
            <summary>
            This class contains methods to help with enumrating items.
            </summary>
        </member>
        <member name="M:FunnyDation.Common.Helper.EnumerableHelper.ForEachByCols(System.Int32,System.Int32,System.Action{System.Int32,System.Int32})">
            <summary>
            Calls the action by supplying the start and end index.
            </summary>
            <param name="itemCount">Number of items.</param>
            <param name="cols">Number of columns.</param>
            <param name="action">Action to call for each item.</param>
        </member>
        <member name="T:FunnyDation.Common.Helper.ExpressionHelper">
            <summary>
            This class provides helper expression methods.
            </summary>
        </member>
        <member name="M:FunnyDation.Common.Helper.ExpressionHelper.GetPropertyName``1(System.Linq.Expressions.Expression{System.Func{``0,System.Object}})">
            <summary>
            Get the property name from the expression.
            e.g. GetPropertyName(Person)( p => p.FirstName);
            </summary>
            <typeparam name="T"></typeparam>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.ExpressionHelper.GetPropertyName(System.Linq.Expressions.Expression{System.Func{System.Object}})">
            <summary>
            Get the property name from the expression.
            e.g. GetPropertyName(Person)( p => p.FirstName);
            </summary>
            <param name="exp"></param>
            <returns></returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.ExpressionHelper.GetPropertyNameAndValue(System.Linq.Expressions.Expression{System.Func{System.Object}},System.String@)">
            <summary>
            Get the property name from the expression.
            e.g. GetPropertyName(Person)( p => p.FirstName);
            </summary>
            <param name="exp"></param>
            <param name="propName"></param>
            <returns></returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.ExpressionHelper.Build``1(System.Linq.Expressions.Expression{System.Func{``0,System.Boolean}})">
            <summary>
            Delete using the expression.
            e.g. entity.LogLevel == 1
            </summary>
            <typeparam name="T"></typeparam>
            <param name="predicate"></param>
        </member>
        <member name="M:FunnyDation.Common.Helper.RepositoryExpressionTypeHelper.GetText(System.Linq.Expressions.ExpressionType)">
            <summary>
            Get the sql text equivalent of the expression type.
            </summary>
            <param name="expType"></param>
            <returns></returns>
        </member>
        <member name="T:FunnyDation.Common.Helper.FileHelper">
            <summary>
            This class provides various file helper methods.
            </summary>      
        </member>
        <member name="M:FunnyDation.Common.Helper.FileHelper.GetOriginalExtension(System.String,System.String)">
            <summary>
            Gets the orginal extension from a renamed extension. e.g. file.xml.config return .xml instead of .config. file.xml returns .xml.
            </summary>
            <param name="path">/config/users.csv.config</param>
            <param name="appendedExtension">The extra extension appended to the file. e.g. ".config"</param>
            <returns>String with original extension.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.FileHelper.PrependText(System.String,System.IO.FileInfo)">
            <summary>
            Prepend some text to a file.
            </summary>
            <param name="text">Text to prepend to a file.</param>
            <param name="file">File where text will be prepended.</param>
        </member>
        <member name="M:FunnyDation.Common.Helper.FileHelper.GetVersion(System.String)">
            <summary>
            Get the file version information.
            </summary>
            <param name="filePath">Path to file.</param>
            <returns>String with the file version.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.FileHelper.GetSizeInBytes(System.String)">
            <summary>
            Get file size in bytes.
            </summary>
            <param name="filePath">Path to file.</param>
            <returns>File size in bytes.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.FileHelper.GetSizeInKilo(System.String)">
            <summary>
            Get file size in kilobytes.
            </summary>
            <param name="filePath">Path to file.</param>
            <returns>File size in kilobytes.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.FileHelper.GetSizeInMegs(System.String)">
            <summary>
            Get file size in megs.
            </summary>
            <param name="filePath">Path to file.</param>
            <returns>File size in megabytes.</returns>
        </member>
        <member name="T:FunnyDation.Common.Helper.ReflectionHelper">
            <summary>
            This class provides basic reflection helper methods.
            </summary>
        </member>
        <member name="M:FunnyDation.Common.Helper.ReflectionHelper.SetProperty(System.Object,System.Reflection.PropertyInfo,System.String)">
            <summary>
            Set the property value using the string value.
            </summary>
            <param name="obj">Object whose property is to be set.</param>
            <param name="prop">Property name.</param>
            <param name="propVal">Value to set.</param>
        </member>
        <member name="M:FunnyDation.Common.Helper.ReflectionHelper.GetPropertyValueSafely(System.Object,System.Reflection.PropertyInfo)">
            <summary>
            Gets the property value safely, without throwing an exception.
            If an exception is caught, null is returned.
            </summary>
            <param name="obj">Object whose property is to be retrieved.</param>
            <param name="propInfo">Property name.</param>
            <returns></returns>
        </member>
        <member name="T:FunnyDation.Common.Helper.StringHelper">
            <summary>
            String helper methods.
            </summary>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.ReadLines(System.String)">
            <summary>
            Read all the lines in the string.
            </summary>
            <param name="text">Text with lines.</param>
            <returns>List of lines in text.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.GetDelimitedChars(System.String,System.String,System.Char)">
            <summary>
            Get delimited chars from a string.
            </summary>
            <param name="rawText">search-classes-workshops-4-1-1-6</param>
            <param name="excludeText">search-classes-workshops</param>
            <param name="delimiter">-</param>
            <returns>Array with delimited chars.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.Truncate(System.String,System.Int32)">
            <summary>
            Truncates the string.
            </summary>
            <param name="txt">String to truncate.</param>
            <param name="maxChars">Maximum string length.</param>
            <returns>String truncated to length.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.TruncateWithText(System.String,System.Int32,System.String)">
            <summary>
            Truncate the text supplied by number of characters specified by <paramref name="maxChars"/>
            and then appends the suffix.
            </summary>
            <param name="txt">Text to truncate.</param>
            <param name="maxChars">Maximum text length.</param>
            <param name="suffix">Suffix to append.</param>
            <returns>Truncated string with appended suffix.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.Join(System.Collections.Generic.IList{System.String},System.String)">
            <summary>
            Join string enumeration items.
            </summary>
            <param name="items">List of items to join to a string.</param>
            <param name="delimeter">Delimiter between items.</param>
            <returns>Joined items.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.GetOriginalOrEmptyString(System.String)">
            <summary>
            If null returns empty string.
            Else, returns original.
            </summary>
            <param name="text">Text to check.</param>
            <returns>Original text or empty string.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.GetDefaultStringIfEmpty(System.String,System.String)">
            <summary>
            Returns the defaultval if the val string is null or empty.
            Returns the val string otherwise.
            </summary>
            <param name="val">Val string.</param>
            <param name="defaultVal">Default value.</param>
            <returns>Val string or default value if val is null or empty.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.ConvertToSentanceCase(System.String,System.Char)">
            <summary>
            Convert the word(s) in the sentence to sentence case.
            UPPER = Upper
            lower = Lower
            MiXEd = Mixed
            </summary>
            <param name="s">Sentence.</param>
            <param name="delimiter">Delimiter.</param>
            <returns>Original string as sentence case.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.GetIndexOfSpacer(System.String,System.Int32,System.Boolean@)">
            <summary>
            Get the index of a spacer ( space" " or newline )
            </summary>
            <param name="txt">Text to look into.</param>
            <param name="currentPosition">Starting position to start looking after.</param>
            <param name="isNewLine">True if a new line is found instead of a space.</param>
            <returns>Index of spacer.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.ConvertBoolToYesNo(System.Boolean)">
            <summary>
            Convert boolean value to "Yes" or "No"
            </summary>
            <param name="b">Boolean value to convert.</param>
            <returns>Yes/No based on boolean value.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.ConvertToString(System.Object[])">
            <summary>
            Converts to string.
            </summary>
            <param name="args">The args.</param>
            <returns>Converted string.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.ToMap(System.String,System.Char)">
            <summary>
            Convert to delimited text to a dictionary.
            </summary>
            <param name="delimitedText">"1,2,3,4,5"</param>
            <param name="delimeter">','</param>
            <returns>Dictionary with delimited text and tokens.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.ToMap(System.String,System.Char,System.Char,System.Boolean,System.Boolean)">
            <summary>
            Map a set of keyvalue pairs to a dictionary.
            </summary>
            <param name="delimitedText">e.g. "city=Queens, state=Ny, zipcode=12345, country=usa"</param>
            <param name="keyValuePairDelimiter">","</param>
            <param name="keyValueDelimeter">"="</param>
            <param name="makeKeysCaseSensitive">Flag to make the keys case insensitive, which
            converts the keys to lowercase if set to true.</param>
            <param name="trimValues">Flag to trim the values in the key-value pairs.</param>
            <returns>Dictionary with text and tokens.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.ToStringArray(System.String,System.Char)">
            <summary>
            Parses a delimited list of items into a string[].
            </summary>
            <param name="delimitedText">"1,2,3,4,5,6"</param>
            <param name="delimeter">','</param>
            <returns>String array with list of items in string.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.Substitute(System.String,System.Func{System.String,System.String},System.String)">
            <summary>
            Substitute parameters in an input text in the format ${name} with another value
            </summary>
            <param name="input">The input text containing parameters to substitute e.g. In "abc_${month}_${year}_123" "month" and "year" are the parameters</param>
            <param name="substitutor">Callback function to get the value substituted value for a parameter </param>
            <param name="pattern">The Regex pattern to represent the parameters. default is (?&lt;name>\$\{.+?\})</param>
            <returns></returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.DoFixedLengthPrinting(System.Collections.IDictionary,System.Int32,System.Action{System.String,System.Object})">
            <summary>
            Finds the maximum length of a key and padd all the rest of the keys to be 
            the same fixed length, and calls the delegate supplied.
            </summary>
            <param name="keyValues">The key value pairs.</param>
            <param name="extraPadding">Additional number of chars to pad to the keys.</param>
            <param name="printer">The delegate to call to print to.</param>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.GetFixedLengthString(System.String,System.Int32,System.String)">
            <summary>
            Builds a fixed length string with the maxChars provided.
            </summary>
            <param name="text">Current string to start with.</param>
            <param name="maxChars">Maximum number of characters.</param>
            <param name="paddingChar">Padding character.</param>
            <returns>Final created string.</returns>
        </member>
        <member name="F:FunnyDation.Common.Helper.StringHelper.LineBreakingCharacters">
            <summary>
            A liberal list of line breaking characters used in unicode. Typically,
            LF and CR are the only characters supported in C#.
            </summary>
        </member>
        <member name="F:FunnyDation.Common.Helper.StringHelper.DosLineSeparator">
            <summary>
            DOS/Windows style line breaks (CR+LF)
            </summary>
        </member>
        <member name="F:FunnyDation.Common.Helper.StringHelper.UnixLineSeparator">
            <summary>
            Unix style line breaks (LF)
            </summary>
        </member>
        <member name="F:FunnyDation.Common.Helper.StringHelper.MacOs9Separator">
            <summary>
            Commodore, TRS-80, Apple II, Apple MacOS9 style line breaks (CR)
            </summary>
        </member>
        <member name="F:FunnyDation.Common.Helper.StringHelper.UnicodeSeparator">
            <summary>
            Unicode line separator - not widely supported
            </summary>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.ConvertLineSeparators(System.IO.TextReader,System.IO.TextWriter,System.Char[])">
            <summary>
            Converts from a liberal list of unicode line separators to the
            specified line separator.
            </summary>
            <param name="reader">TextReader to read from</param>
            <param name="writer">TextReader to write to</param>
            <param name="separator">Line break separator.</param>
        </member>
        <member name="M:FunnyDation.Common.Helper.StringHelper.ConvertLineSeparators(System.String,System.Char[])">
            <summary>
            Converts from a liberal list of unicode line separators to the
            specified line separator.
            </summary>
            <example>
            // Convert line breaks to current environment's default
            var text = "blah blah...";
            ConvertLineSeparators(text, Environment.NewLine.ToCharArray());
            </example>
            <param name="text">Source text</param>
            <param name="separator">Line break separator.</param>
            <returns>String with normalized line separators</returns>
        </member>
        <member name="T:FunnyDation.Common.Helper.TypeHelper">
            <summary>
            This class provides basic operations that deal with system types.
            </summary>
        </member>
        <member name="M:FunnyDation.Common.Helper.TypeHelper.#cctor">
            <summary>
            Static initializer.
            </summary>
        </member>
        <member name="M:FunnyDation.Common.Helper.TypeHelper.IsNumeric(System.Object)">
            <summary>
            Determines whether the supplied object is of a numeric type.
            </summary>
            <param name="val">Object to check.</param>
            <returns>True if the supplied object is of a numeric type.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.TypeHelper.IsNumeric(System.Type)">
            <summary>
            Determines whether objects of the supplied type are numeric.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if objects of the supplied type are numeric.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.TypeHelper.IsBasicType(System.Type)">
            <summary>
            Determines whether the type represents a basic type.
            </summary>
            <param name="type">Type to check.</param>
            <returns>True if this is a basic type.</returns>
        </member>
        <member name="M:FunnyDation.Common.Helper.TypeHelper.Join(System.Object[])">
            <summary>
            Converts an array of objects to a comma-separated string representation.
            </summary>
            <param name="vals">Array of objects.</param>
            <returns>Comma-separated string representation of the array of objects.</returns>
        </member>
        <member name="M:FunnyDation.Common.MytUtility.GetGlyphPath(System.String)">
            <summary>
            Retrun gly path
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:FunnyDation.Common.Service.IocService">
            <summary>
            Interface
            </summary>
        </member>
    </members>
</doc>
